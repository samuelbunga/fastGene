PycharmProjects/BCH/genes_pval.csv')
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py
PycharmProjects/BCH/genes_pval.csv')
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py
PycharmProjects/BCH/genes_pval.csv')
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py
PycharmProjects/BCH/genes_pval.csv')
s
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py
PycharmProjects/BCH/genes_pval.csv')
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py PycharmProjects/BCH/genes_pval.csv')
# Read back the output file from the above python script
gene_df <- read.csv('/Users/sbunga/PycharmProjects/BCH/hgnc_symbols.csv',
header = T, row.names  = 1)
names(gene_list) <- gene_df$HGNC_Symbols
gene_list <- gene_list[names(gene_list) %in% c('None', "") == F]
# Load gmt file
gmtfile <- "PycharmProjects/BCH/Database/c2.cp.kegg.v7.2.symbols.gmt"
c2 <- read.gmt(gmtfile)
GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 3, maxGSSize = 600, nPermSimple = 10000
)
length(unique(unname(gene_list)))
head(gene_list)
length(gene_list)
length(unique(unname(gene_list)))
303/502
502/303
(303/502)*100
(303/502)*100 - 100
100 -(303/502)*100
(303/502)*100
# we want the log2 fold change
original_gene_list <- df$p_val
# name the vector
names(original_gene_list) <- df$X
# omit any NA values
gene_list <- na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list,
decreasing = TRUE)
gene_df <- data.frame('genes'=names(gene_list),
'rank'=unname(gene_list))
write.csv(file='/Users/sbunga/PycharmProjects/BCH/genes_pval.csv',
gene_df, quote = F, row.names = F)
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py PycharmProjects/BCH/genes_pval.csv')
# Read back the output file from the above python script
gene_df <- read.csv('/Users/sbunga/PycharmProjects/BCH/hgnc_symbols.csv',
header = T, row.names  = 1)
names(gene_list) <- gene_df$HGNC_Symbols
gene_list <- gene_list[names(gene_list) %in% c('None', "") == F]
# Load gmt file
gmtfile <- "PycharmProjects/BCH/Database/c2.cp.kegg.v7.2.symbols.gmt"
c2 <- read.gmt(gmtfile)
egmt2 <- GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 15, maxGSSize = 600, nPermSimple = 10000
)
gseaplot(egmt, geneSetID = 1)
gseaplot(egmt2, geneSetID = 1)
# we want the log2 fold change
original_gene_list <- df$avg_logFC
# name the vector
names(original_gene_list) <- df$X
# omit any NA values
gene_list <- na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list,
decreasing = TRUE)
gene_df <- data.frame('genes'=names(gene_list),
'rank'=unname(gene_list))
write.csv(file='/Users/sbunga/PycharmProjects/BCH/genes_pval.csv',
gene_df, quote = F, row.names = F)
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py PycharmProjects/BCH/genes_pval.csv')
# Read back the output file from the above python script
gene_df <- read.csv('/Users/sbunga/PycharmProjects/BCH/hgnc_symbols.csv',
header = T, row.names  = 1)
names(gene_list) <- gene_df$HGNC_Symbols
gene_list <- gene_list[names(gene_list) %in% c('None', "") == F]
# Load gmt file
gmtfile <- "PycharmProjects/BCH/Database/c2.cp.kegg.v7.2.symbols.gmt"
c2 <- read.gmt(gmtfile)
egmt2 <- GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 15, maxGSSize = 600, nPermSimple = 10000
)
length(gene_list)
length(unique(gene_list))
length(unique(names(gene_list)))
gene_list <- gene_list[!duplicated(names(gene_list))]
length(gene_list)
egmt2 <- GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 15, maxGSSize = 600, nPermSimple = 10000
)
egmt2 <- GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 15, maxGSSize = 600, nPermSimple = 10000,
pvalueCutoff = 1
)
gseaplot(egmt2, geneSetID = 1)
gseaplot2(egmt2, geneSetID = 1)
egmt2 <- GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 15, maxGSSize = 600, nPermSimple = 10000,
pvalueCutoff = 0.8
)
gseaplot2(egmt2, geneSetID = 1)
# we want the log2 fold change
original_gene_list <- df$p_val_adj
# name the vector
names(original_gene_list) <- df$X
# omit any NA values
gene_list <- na.omit(original_gene_list)
# sort the list in decreasing order (required for clusterProfiler)
gene_list = sort(gene_list,
decreasing = TRUE)
gene_df <- data.frame('genes'=names(gene_list),
'rank'=unname(gene_list))
write.csv(file='/Users/sbunga/PycharmProjects/BCH/genes_pval.csv',
gene_df, quote = F, row.names = F)
# Wrapper script to convert mouse gene symbols to human genes symbols
# using INDRA resources
system('/opt/miniconda3/envs/INDRA/bin/python3 PycharmProjects/BCH/mgi_hgnc.py PycharmProjects/BCH/genes_pval.csv')
# Read back the output file from the above python script
gene_df <- read.csv('/Users/sbunga/PycharmProjects/BCH/hgnc_symbols.csv',
header = T, row.names  = 1)
names(gene_list) <- gene_df$HGNC_Symbols
gene_list <- gene_list[names(gene_list) %in% c('None', "") == F]
# removing duplicate genes
gene_list <- gene_list[!duplicated(names(gene_list))]
# Load gmt file
gmtfile <- "PycharmProjects/BCH/Database/c2.cp.kegg.v7.2.symbols.gmt"
c2 <- read.gmt(gmtfile)
egmt2 <- GSEA(sort(gene_list, decreasing = T),
TERM2GENE=c2,
minGSSize = 15, maxGSSize = 600, nPermSimple = 10000,
pvalueCutoff = 0.8
)
gseaplot2(egmt2, geneSetID = 1)
View(egmt2@result)
gseaplot2(egmt2, geneSetID = 1:3)
system.time({convertMouseGeneList('Ssh2')})
system.time({convertMouseGeneList('Cd4')})
gseaplot2(egmt2, geneSetID = 1:3)
system.file({convertMouseGeneList('Ssh2')})
system.time({convertMouseGeneList('Ssh2')})
source('~/PycharmProjects/BCH/GSEA.R')
install.packages('~/Downloads/COSMOS-0.1/', type = 'source', repos=NULL)
library(cosmos)
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
remove.packages(cosmos)
install.packages("~/Downloads/COSMOS-0.1.tar.gz", repos = NULL, type = "source")
library(cosmos)
#In order to adapt options to users specification we can load them into a variable
#that will then be passed to preprocess_COSMOS_signaling_to_metabolism CARNIVAL_options parameter
my_options <- default_CARNIVAL_options()
remove.packages(cosmos)
library(clusterProfiler)
library(enrichplot)
library(biomaRt)
library(stringr)
# we use ggplot2 to add x axis labels (ex: ridgeplot)
library(ggplot2)
library(fgsea)
# SET THE DESIRED ORGANISM HERE
organism = "org.Mm.eg.db"
library(organism, character.only = TRUE)
Mm <- org.Mm.eg.db
# Basic function to convert mouse to human gene names
convertMouseGeneList <- function(x){
genesV2 <- getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol",
values = x , mart = human, attributesL = c("mgi_symbol"),
martL = mouse, uniqueRows=T)
humanx <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
print(head(humanx))
return(humanx)
}
human = useMart("ensembl", dataset = "hsapiens_gene_ensembl")
mouse = useMart("ensembl", dataset = "mmusculus_gene_ensembl")
convertMouseGeneList('cd4')
convertMouseGeneList('cd4')
convertMouseGeneList('Il6')
convertMouseGeneList('Calm1')
# Basic function to convert mouse to human gene names
convertMouseGeneList <- function(x){
genesV2 <- getLDS(attributes = c("hgnc_symbol"), filters = "hgnc_symbol",
values = x , mart = human, attributesL = c("mgi_symbol"),
martL = mouse, uniqueRows=T)
humanx <- unique(genesV2[, 2])
# Print the first 6 genes found to the screen
return(genesV2)
}
convertMouseGeneList('Calm1')
head(human)
human
human@dataset
human@biomart
View(human)
human@attributes$page
human@attributes
human@filters
View(human@filters)
time(convertMouseGeneList('Calm1'))
library(biomaRt)
??getBM
listAttributes()
mart <- useMart("ensembl", dataset="mmusculus_gene_ensembl")
mart
attributes=c('ensembl_gene_id','mgi_symbol')
genes = 'Calm1'
getBM(attributes=attributes,
values=genes,
filters = "mgi_symbol",
mart=mart, uniqueRows=T)
setwd('~/R/fastGene/')
getwd()
library(roxygen2)
roxygenise()
system('python3')
system('python3 -v')
?reticulate
library(reticulate)
?reticulate
reticulate::conda_list()
reticulate::import('indra')
Module(indra)
a <- reticulate::import('indra')
a
#from indra.databases.uniprot_client import um
#from indra.databases.hgnc_client import get_hgnc_from_mouse, get_hgnc_name
um <- import('from indra.databases.uniprot_client import um')
a$get_config
a$get_config()
s <- import("os")
dir(s)
?s
??s
getwd()
import_from_path('./R/mgi_to_hgnc.py')
import_from_path('./R/mgi_to_hgnc.py')
import('./R/mgi_to_hgnc')
import('mgi_to_hgnc')
setwd('./R/')
import('mgi_to_hgnc')
convert_symbols(["Il6"], 'Mouse')
convert_symbols("['Il6'']", 'Mouse')
mgi_to_hgnc <- import('mgi_to_hgnc')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
mgi_to_hgnc$convert_symbols("['Il6']", 'Mouse')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
mgi_to_hgnc <- import('mgi_to_hgnc')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
mgi_to_hgnc <- import('mgi_to_hgnc')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
rm(mgi_to_hgnc)
mgi_to_hgnc <- import('mgi_to_hgnc')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
mgi_to_hgnc$convert_symbols("[Il6]")
mgi_to_hgnc$convert_symbols("Il6")
mgi_to_hgnc$convert_symbols("Il6", 'Mouse')
mgi_to_hgnc$convert_symbols("Il6", 'Mouse')
library(reticulate)
setwd('./R/')
mgi_to_hgnc <- import('mgi_to_hgnc')
mgi_to_hgnc <- import('mgi_to_hgnc')
mgi_to_hgnc$convert_symbols("[Il6]", 'Mouse')
mgi_to_hgnc$convert_symbols(c('Il6', 'Il7'), 'Mouse')
mgi_to_hgnc$convert_symbols(c('Il6', 'Il7', 'IL6'), 'Mouse')
is.vector(c('Il6', 'Il7', 'IL6'))
is.vector("'Il6', 'Il7', 'IL6'")
mgi_to_hgnc$convert_symbols("'Il6', 'Il7', 'IL6'", 'Mouse')
mgi_to_hgnc$convert_symbols(c('Il6', 'Il7', 'IL6'), 'Mouse')
getwd()
library(devtools);
load_all(".")
setwd('scripts/')
mgi_to_hgnc <- import('mgi_to_hgnc')
import(indra)
library(reticulate)
import(indra)
import('indra')
reticulate::configure_environment()
reticulate::py_module_available('indra')
import('indra')
load_all(".")
getwd()
setwd('../')
getwd()
load_all(".")
library(devtools);
load_all(".")
library(devtools);
load_all(".")
load_all(".")
library(devtools)
load_all(".")
library(roxygen2)
load_all(".")
getwd()
document()
document()
document()
document()
roxygenise()
roxygenise()
library(roxygen2)
roxygenise()
cat_function <- function(love=TRUE){
if(love==TRUE){
print("I love cats!")
}
else {
print("I am not a cool person.")
}
}
cat_function()
library(devtools)
load_all(".")
getwd()
setwd("./")
load_all(".")
load_all(".")
load_all(".")
library(roxygen2)
roxygenise()
traceback()
roxygenise()
roxygenise()
traceback()
roxygenise()
rm(list = c("cat_function"))
roxygenise()
roxygenise()
library(devtools)
library(roxygen2)
load_all(".")
fastGene::cat_function()
library(reticulate)
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
roxygenise()
load_all(".")
fastGene::convert_symbols()
roxygenise()
load_all(".")
fastGene::convert_symbols()
load_all(".")
fastGene::convert_symbols()
getwd()
setwd('~/')
load_all("/Users/sbunga/R/fastGene")
getwd()
load_all("/Users/sbunga/R/fastGene")
fastGene::convert_symbols()
import('indra')
find.package("fastGene")
loc <- find.package("fastGene")
loc
mgi_to_hgnc <- import(paste0(loc, '/scripts/mgi_to_hgnc'))
import_from_path(paste0(loc, '/scripts/mgi_to_hgnc'))
setwd(paste0(loc, '/scripts/'))
mgi_to_hgnc <- import('mgi_to_hgnc')
setwd("~/")
mgi_to_hgnc <- import_from_path('mgi_to_hgnc',
path = paste0(loc,'/scripts'))
mgi_to_hgnc$convert_symbols(c('Il6', 'Il7', 'IL6'))
mgi_to_hgnc <- import_from_path('mgi_to_hgnc',
path = paste0(loc,'/scripts'))
mgi_to_hgnc$convert_symbols(c('Il6', 'Il7', 'IL6'))
mgi_to_hgnc <- import_from_path('mgi_to_hgnc',
path = paste0(loc,'/scripts'))
mgi_to_hgnc$convert_symbols(c('Il6', 'Il7', 'IL6'))
mgi_to_hgnc <- import_from_path('mgi_to_hgnc',
path = paste0(loc,'/scripts'))
library(reticulate)
loc <- find.package("fastGene")
library(devtools)
load_all("/Users/sbunga/R/fastGene")
loc <- find.package("fastGene")
mgi_to_hgnc <- import_from_path('mgi_to_hgnc',
path = paste0(loc,'/scripts'))
library(reticulate)
loc <- find.package("fastGene")
mgi_to_hgnc <- import_from_path('mgi_to_hgnc',
path = paste0(loc,'/scripts'))
import('indra')
?virtualenv_install
library(devtools)
library(roxygen2)
remove.packages('fastGene')
library(devtools)
library(roxygen2)
load_all("/Users/sbunga/R/fastGene")
fastGene::system.file()
fastGene::convert_symbols()
fastGene::convert_symbols(c('IL6'))
fastGene::convert_symbols()
import('sys')
import('indra')
import('pandas')
?fastGene
load_all("/Users/sbunga/R/fastGene")
?fastGene
??fastGene
?fastGene::convert_symbols
convert_symbols()
library('fastGene', lib.loc = '~/R/fastGene/')
?install.packages
install.packages("~/R/fastGene/")
library(fastGene)
import('indra')
reticulate::py_module_available('indra')
reticulate::py_module_available('pandas')
unload("fastGene")
load_all("/Users/sbunga/R/fastGene")
load_all("/Users/sbunga/R/fastGene")
load_all("/Users/sbunga/R/fastGene")
unload("fastGene")
load_all("/Users/sbunga/R/fastGene")
fastGene::convert_symbols()
fastGene::convert_symbols()
unload("fastGene")
reticulate::py_install('pandas', pip = T)
#' Gene symbol conversion
#'
#' Convert between Mouse and Human gene symbols
#' @param genes vector of genes
#' @export
#' @examples
#' symbols <- convert_symbols(c('Il6'))
virtualenv_create("r-fastGene")
reticulate::py_install('pandas', pip = T, envname = 'r-fastGene')
reticulate::py_install('indra', pip = T, envname = 'r-fastGene')
if(py_module_available('indra') == F){
reticulate::py_install('indra', pip = T,
envname = 'r-fastGene')
}
if(py_module_available('indra') == F){
reticulate::py_install('indra', pip = T,
envname = 'r-fastGene')
}
py_module_available('indra')
import('indra')
virtualenv_list()
use_virtualenv('r-fastGene')
py_module_available('pandas')
py_install('pandas', pip = T, envname = 'r-fastGene')
use_virtualenv('r-fastGene')
py_module_available('pandas')
py_module_available('indra')
py_module_available('os')
#' Gene symbol conversion
#'
#' Convert between Mouse and Human gene symbols
#' @param genes vector of genes
#' @export
#' @examples
#' symbols <- convert_symbols(c('Il6'))
library(reticulate)
virtualenv_list()
virtualenv_python()
py_install('indra', pip = T, envname = 'r-fastGene')
py_module_available('indra')
import_from_path('pandas')
virtualenv_python()
virtualenv_python()
load_all("/Users/sbunga/R/fastGene")
library(devtools)
library(roxygen2)
load_all("/Users/sbunga/R/fastGene")
fastGene::convert_symbols()
py_available()
virtualenv_remove('r-fastGene')
Y
conda_list()
c <- conda_list()
c$name
conda_list()[1]
conda_list()[[1]]
if(conda_list()[[1]] != 'r-fastGene'){
conda_install('r-fastGene', packages = 'pandas')
}
conda_list()[[1]]
reticulate::use_condaenv('r-fastGene')
import('pandas')
import('pandas')
import('indra')
load_all("/Users/sbunga/R/fastGene")
fastGene::convert_symbols()
